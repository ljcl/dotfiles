[alias]
# View abbreviated SHA, description, and history graph of the latest 20 commits
l = log -n 50
s = status -s
# Show the diff between the latest commit and the current state
d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
# `git di $number` shows the diff between the state `$number` revisions ago and the current state
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
# Pull in remote changes for the current repository and all its submodules
p = pull --recurse-submodules
# Clone a repository including all submodules
c = clone --recursive
# Commit all changes
ca = !git add -A && git commit -Sav
# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a --no-merged develop
remotes = remote -v
aliases = config --get-regexp alias
# Amend the currently staged files to the latest commit
amend = commit --amend --reuse-message=HEAD --no-verify
# Credit an author on the latest commit
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
# Interactive rebase with the given number of latest commits
reb = "!r() { git rebase -i HEAD~$1; }; r"
# Remove the old tag with this name and tag the latest commit with it.
retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"
# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"
# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
# Remove branches that have already been merged with master
cleanup = "!git branch --merged | grep  -v 'master\\|release\\|develop' | xargs -n 1 git branch -d"
# Fetch & then update remotes
fupdate = "!git remote update origin --prune"
# List contributors with number of commits
contributors = shortlog --summary --numbered
whoami = config user.email

[log]
date = relative

[format]
pretty = shortlog

[pretty]
shortlog = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(12,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D

[apply]
# Detect whitespace errors when applying a patch
whitespace = fix

[branch]
# Show most recently changed branches first.
sort = -committerdate

[core]
excludesfile = ~/.gitignore
whitespace = space-before-tab,-indent-with-non-tab,trailing-space
trustctime = false
editor = code-insiders --wait
precomposeunicode = false
untrackedCache = true
pager = cat

[color]
# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
ui = auto

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]
added = yellow
changed = green
untracked = cyan

[commit]
gpgsign = false

[diff]
# Detect copies as well as renames
renames = copies

[diff "bin"]
# Use `hexdump` to diff binary files
textconv = hexdump -v -C

[help]
# Automatically correct and execute mistyped commands
autocorrect = 1

[merge]
# Include summaries of merged commits in newly created merge commit messages
log = true

[push]
default = simple
followTags = true

# URL shorthands
[url "git@github.com:"]
insteadOf = "gh:"
pushInsteadOf = "github:"
pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
insteadOf = "github:"

[url "git@gist.github.com:"]
insteadOf = "gst:"
pushInsteadOf = "gist:"
pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
insteadOf = "gist:"

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
required = true

[pull]
ff = only

[init]
defaultBranch = main
